{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const dir = [1, -20, 1, 20];\n  const [level, setLevel] = useState(1);\n  const [snakes, setSnakes] = useState(() => {\n    const a = createSnake(level + 1);\n    return [a];\n  });\n  const [delx, setDelx] = useState(-1);\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [refresh, setRefresh] = useState(1);\n  const [score, setScore] = useState(0);\n  const [toggleGame, setToggleGame] = useState(1);\n  useEffect(() => {\n    placeSnake();\n    placeDiamond();\n  }, [diamondPosition, snakes]);\n  useEffect(() => {\n    const direction = setInterval(() => {}, 3000);\n    if (toggleGame == 0) clearInterval(direction);\n    return () => {\n      clearInterval(direction);\n    };\n  }, [toggleGame]);\n  const refreshButton = () => {\n    setRefresh(refresh + 1);\n  };\n  const getNextPosition = (snakeHead, delx) => {\n    var newPos = 1;\n    if (delx == 1 && snakeHead % 20 == 0) {\n      newPos = snakePosition - 19;\n    } else if (delx == -1 && snakeHead % 20 == 1) {\n      newPos = snakePosition + 19;\n    } else {\n      newPos = snakeHead == 199 ? 200 : (snakeHead + delx + 200) % 200;\n    }\n    return newPos;\n  };\n  useEffect(() => {\n    const moveInterval = setInterval(() => {\n      const nextPos = getNextPosition(snakePosition, delx);\n      setSnakePosition(nextPos);\n      removeSnake();\n    }, 1000);\n    if (toggleGame == 0) {\n      clearInterval(moveInterval);\n    }\n    return () => {\n      clearInterval(moveInterval);\n    };\n  }, [toggleGame, snakePosition]);\n  const placeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'blue';\n  };\n  const removeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'black';\n  };\n  const placeSnake = () => {\n    const snake = document.querySelector('.grid #_' + snakePosition);\n    snake.style.backgroundColor = 'red';\n  };\n  const removeSnake = () => {\n    const snake = document.querySelector('.grid #_' + snakePosition);\n    snake.style.backgroundColor = 'black';\n  };\n  const diamondClick = e => {\n    const clicked = e.target;\n    if (clicked.getAttribute('id') == '_' + diamondPosition) {\n      setScore(score + 10);\n      setLevel(level + 1);\n      removeDiamond();\n      setDiamondPosition(Math.floor(Math.random() * COLS * ROWS));\n    }\n  };\n  const createSnake = length => {\n    var head = Math.floor(Math.random() * COLS * ROWS);\n    const dirIndex = Math.floor(Math.random() * 4);\n    const direct = dir[dirIndex];\n    const snakeDots = [head];\n    for (let i = 1; i < length; i++) {\n      const newHead = getNextPosition(head, -direct);\n      snakeDots.unshift(newHead);\n      head = newHead;\n    }\n    return {\n      dots: snakeDots,\n      direction: direct\n    };\n  };\n  const updateDirection = () => {\n    for (let i = 0; i < snakes.length; i++) {\n      const dirArr = dir.filter(item => item != -snakes[i].direction);\n      const dirIndex = Math.floor(Math.random() * 3);\n      snakes[i].direction = dirArr[dirIndex];\n    }\n  };\n\n  // const handleKeyDown = (e) => {\n  //     switch (e.keyCode) {\n  //         case 37: // Left arrow\n  //             movePlayer(-CELL_SIZE, 0);\n  //             break;\n  //         case 38: // Up arrow\n  //             movePlayer(0, -CELL_SIZE);\n  //             break;\n  //         case 39: // Right arrow\n  //             movePlayer(CELL_SIZE, 0);\n  //             break;\n  //         case 40: // Down arrow\n  //             movePlayer(0, CELL_SIZE);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // };\n\n  // const movePlayer = (dx, dy) => {\n  //     const newX = playerPosition.x + dx;\n  //     const newY = playerPosition.y + dy;\n  //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n  //         setPlayerPosition({ x: newX, y: newY });\n  //         checkCollision(newX, newY);\n  //     }\n  // };\n\n  // const checkCollision = (x, y) => {\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: diamondClick,\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n        gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`\n      },\n      children: Array.from({\n        length: ROWS * COLS\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: '_' + (index + 1)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setToggleGame(1 - toggleGame);\n      },\n      children: toggleGame ? 'Stop' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshButton,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"1smgCm/zJHvHy+OokROdFNEFjGY=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","clear","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","dir","level","setLevel","snakes","setSnakes","a","createSnake","delx","setDelx","diamondPosition","setDiamondPosition","Math","floor","random","refresh","setRefresh","score","setScore","toggleGame","setToggleGame","placeSnake","placeDiamond","direction","setInterval","clearInterval","refreshButton","getNextPosition","snakeHead","newPos","snakePosition","moveInterval","nextPos","setSnakePosition","removeSnake","diamond","document","querySelector","style","backgroundColor","removeDiamond","snake","diamondClick","e","clicked","target","getAttribute","length","head","dirIndex","direct","snakeDots","i","newHead","unshift","dots","updateDirection","dirArr","filter","item","children","onClick","className","gridTemplateColumns","gridTemplateRows","Array","from","_","index","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const dir = [1, -20, 1, 20]\n    const [level, setLevel] = useState(1)\n    const [snakes, setSnakes] = useState(() => {\n        const a = createSnake(level + 1)\n        return [a]\n\n    });\n    const [delx, setDelx] = useState(-1)\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [refresh, setRefresh] = useState(1)\n    const [score, setScore] = useState(0);\n    const [toggleGame, setToggleGame] = useState(1)\n\n    useEffect(() => {\n        placeSnake();\n        placeDiamond();\n\n    }, [diamondPosition, snakes])\n\n    useEffect(() => {\n        const direction = setInterval(() => {\n\n        }, 3000)\n        if (toggleGame == 0) clearInterval(direction)\n        return () => { clearInterval(direction) }\n    }, [toggleGame])\n\n    const refreshButton = () => {\n        setRefresh(refresh + 1)\n    }\n\n    const getNextPosition = (snakeHead, delx) => {\n        var newPos = 1;\n        if (delx == 1 && snakeHead % 20 == 0) {\n            newPos = (snakePosition - 19)\n        }\n        else if (delx == -1 && snakeHead % 20 == 1) {\n            newPos = (snakePosition + 19)\n        }\n        else {\n            newPos = snakeHead == 199 ? 200 : (snakeHead + delx + 200) % 200\n        }\n        return newPos\n    }\n\n\n    useEffect(() => {\n        const moveInterval = setInterval(() => {\n            const nextPos = getNextPosition(snakePosition, delx)\n            setSnakePosition(nextPos)\n\n            removeSnake()\n\n        }, 1000)\n\n\n\n        if (toggleGame == 0) {\n            clearInterval(moveInterval)\n        }\n\n        return () => { clearInterval(moveInterval); }\n    }, [toggleGame, snakePosition]);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n    }\n    const removeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'black'\n\n    }\n    const placeSnake = () => {\n        const snake = document.querySelector('.grid #_' + snakePosition)\n        snake.style.backgroundColor = 'red'\n    }\n    const removeSnake = () => {\n        const snake = document.querySelector('.grid #_' + snakePosition)\n        snake.style.backgroundColor = 'black'\n    }\n\n    const diamondClick = (e) => {\n        const clicked = e.target\n        if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n            setScore(score + 10)\n            setLevel(level + 1)\n            removeDiamond()\n            setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n        }\n\n    }\n\n    const createSnake = (length) => {\n        var head = Math.floor(Math.random() * COLS * ROWS)\n        const dirIndex = Math.floor(Math.random() * 4)\n        const direct = dir[dirIndex]\n        const snakeDots = [head]\n\n        for (let i = 1; i < length; i++) {\n            const newHead = getNextPosition(head, -direct)\n            snakeDots.unshift(newHead)\n            head = newHead\n        }\n        return { dots: snakeDots, direction: direct }\n\n    }\n    const updateDirection = () => {\n        for (let i = 0; i < snakes.length; i++) {\n            const dirArr = dir.filter((item) => item != -snakes[i].direction);\n            const dirIndex = Math.floor(Math.random() * 3)\n            snakes[i].direction = dirArr[dirIndex]\n        }\n    }\n\n\n\n\n    // const handleKeyDown = (e) => {\n    //     switch (e.keyCode) {\n    //         case 37: // Left arrow\n    //             movePlayer(-CELL_SIZE, 0);\n    //             break;\n    //         case 38: // Up arrow\n    //             movePlayer(0, -CELL_SIZE);\n    //             break;\n    //         case 39: // Right arrow\n    //             movePlayer(CELL_SIZE, 0);\n    //             break;\n    //         case 40: // Down arrow\n    //             movePlayer(0, CELL_SIZE);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // };\n\n    // const movePlayer = (dx, dy) => {\n    //     const newX = playerPosition.x + dx;\n    //     const newY = playerPosition.y + dy;\n    //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n    //         setPlayerPosition({ x: newX, y: newY });\n    //         checkCollision(newX, newY);\n    //     }\n    // };\n\n    // const checkCollision = (x, y) => {\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <div onClick={diamondClick}\n                className=\"grid\"\n                style={{\n                    gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n                    gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`,\n                }}\n            >\n                {Array.from({ length: ROWS * COLS }, (_, index) => (\n                    < div key={index} id={'_' + (index + 1)} />\n                ))}\n            </div>\n\n            <div>Score: {score}</div>\n            <div>Level: {level}</div>\n            <button onClick={() => { setToggleGame(1 - toggleGame) }}>{toggleGame ? 'Stop' : 'Start'}</button>\n            <button onClick={refreshButton}>Refresh</button>\n\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}