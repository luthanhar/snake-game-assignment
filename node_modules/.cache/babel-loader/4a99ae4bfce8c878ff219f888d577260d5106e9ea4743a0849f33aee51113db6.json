{"ast":null,"code":"import{useState,useEffect,useRef}from'react';import'./play-css.css';import{clear}from'@testing-library/user-event/dist/clear';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SnakeGame=()=>{const ROWS=10;const COLS=20;const CELL_SIZE=30;const dir=[1,-20,1,20];var[level,setLevel]=useState(1);const initHashMap=hashMap=>{for(let i=1;i<=ROWS*COLS;i++){hashMap[i]=0;const element=document.getElementById('_'+i);if(element){element.style.backgroundColor='black';}}};const[hashMap,setHashMap]=useState(()=>{const hash={};initHashMap(hash);return hash;});const getNextPosition=(snakeHead,delx)=>{var newPos=1;if(delx==1&&snakeHead%20==0){newPos=snakeHead-19;}else if(delx==-1&&snakeHead%20==1){newPos=snakeHead+19;}else{newPos=(snakeHead+delx)%200==0?200:(snakeHead+delx+200)%200;}return newPos;};const createSnake=()=>{const length=Math.floor(level/3+3);var head=Math.floor(Math.random()*COLS*ROWS);const dirIndex=Math.floor(Math.random()*4);const direct=dir[dirIndex];const snakeDots=[head];hashMap[head]++;for(let i=1;i<length;i++){const newHead=getNextPosition(head,-direct);snakeDots.unshift(newHead);head=newHead;hashMap[newHead]++;}return{dots:snakeDots,direction:direct};};const[snakes,setSnakes]=useState(()=>{const a=createSnake(5);return[a];});const[diamondPosition,setDiamondPosition]=useState(Math.floor(Math.random()*COLS*ROWS));const[score,setScore]=useState(0);const[toggleGame,setToggleGame]=useState(1);const updatePosRef=useRef();const updateDirRef=useRef();useEffect(()=>{placeSnake();placeDiamond();},[diamondPosition,snakes]);useEffect(()=>{updateDirRef.current=updateDirection;updatePosRef.current=updatePosition;});useEffect(()=>{const moveInterval=setInterval(()=>{updatePosRef.current();},1000);const direction=setInterval(()=>{updateDirRef.current();},5000);if(toggleGame==0){clearInterval(moveInterval);clearInterval(direction);}return()=>{clearInterval(moveInterval);clearInterval(direction);};},[toggleGame]);const placeDiamond=()=>{const diamond=document.querySelector('.grid #_'+diamondPosition);diamond.style.backgroundColor='blue';};const removeDiamond=()=>{const diamond=document.querySelector('.grid #_'+diamondPosition);diamond.style.backgroundColor='black';};const placeSnake=()=>{for(let i=1;i<=ROWS*COLS;i++){const dot=document.querySelector('.grid #_'+i);if(hashMap[i]!=0){dot.style.backgroundColor='red';}else dot.style.backgroundColor='black';}};const diamondClick=e=>{if(!toggleGame)return;const clicked=e.target;if(clicked.getAttribute('id')=='_'+diamondPosition){setScore(score+10);setLevel(level+1);removeDiamond();setDiamondPosition(Math.floor(Math.random()*COLS*ROWS));const temp=[...snakes];const newSnake=createSnake();temp.push(newSnake);setSnakes(temp);}};const updateDirection=()=>{for(let i=0;i<snakes.length;i++){const dirArr=dir.filter(item=>{if(item!=-snakes[i].direction&&item!=snakes[i].direction){return true;}else return false;});const dirIndex=Math.floor(Math.random()*2);snakes[i].direction=dirArr[dirIndex];}};const updatePosition=()=>{const temp=[...snakes];for(let i=0;i<temp.length;i++){const head=temp[i].dots[temp[i].dots.length-1];const direction=temp[i].direction;const newHeadPos=getNextPosition(head,direction);hashMap[newHeadPos]++;hashMap[temp[i].dots[0]]--;temp[i].dots.push(newHeadPos);temp[i].dots.shift();}setSnakes(temp);};const reset=()=>{setLevel(1);setScore(0);initHashMap(hashMap);level=1;const a=createSnake();removeDiamond();setDiamondPosition(Math.floor(Math.random()*COLS*ROWS));setSnakes([a]);setToggleGame(0);};const handleMouseHover=e=>{const hovered=e.target;if(hovered==e.currentTarget){return;}hovered.style.backgroundColor='green';var id=hovered.getAttribute('id');id=id.slice(1);if(hashMap[id]){setScore(score-10);}};const handleMouseOut=e=>{const hovered=e.target;if(hovered==e.currentTarget){return;}var id=hovered.getAttribute('id');id=id.slice(1);if(hashMap[id]){hovered.style.backgroundColor='red';}else if(id==diamondPosition){hovered.style.backgroundColor='blue';}else{hovered.style.backgroundColor='black';}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{onClick:diamondClick,onMouseOver:handleMouseHover,onMouseOut:handleMouseOut,className:\"grid\",style:{gridTemplateColumns:\"repeat(\".concat(COLS,\", \").concat(CELL_SIZE,\"px)\"),gridTemplateRows:\"repeat(\".concat(ROWS,\", \").concat(CELL_SIZE,\"px)\")},children:Array.from({length:ROWS*COLS},(_,index)=>/*#__PURE__*/_jsx(\"div\",{id:'_'+(index+1)},index))}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Score: \",score]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Level: \",level]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setToggleGame(1-toggleGame);},children:toggleGame?'Stop':'Start'}),/*#__PURE__*/_jsx(\"button\",{onClick:reset,children:\"Reset Game\"})]});};export default SnakeGame;","map":{"version":3,"names":["useState","useEffect","useRef","clear","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SnakeGame","ROWS","COLS","CELL_SIZE","dir","level","setLevel","initHashMap","hashMap","i","element","document","getElementById","style","backgroundColor","setHashMap","hash","getNextPosition","snakeHead","delx","newPos","createSnake","length","Math","floor","head","random","dirIndex","direct","snakeDots","newHead","unshift","dots","direction","snakes","setSnakes","a","diamondPosition","setDiamondPosition","score","setScore","toggleGame","setToggleGame","updatePosRef","updateDirRef","placeSnake","placeDiamond","current","updateDirection","updatePosition","moveInterval","setInterval","clearInterval","diamond","querySelector","removeDiamond","dot","diamondClick","e","clicked","target","getAttribute","temp","newSnake","push","dirArr","filter","item","newHeadPos","shift","reset","handleMouseHover","hovered","currentTarget","id","slice","handleMouseOut","children","onClick","onMouseOver","onMouseOut","className","gridTemplateColumns","concat","gridTemplateRows","Array","from","_","index"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game-assignment/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const dir = [1, -20, 1, 20]\n    var [level, setLevel] = useState(1)\n    const initHashMap = (hashMap) => {\n        for (let i = 1; i <= ROWS * COLS; i++) {\n            hashMap[i] = 0\n            const element = document.getElementById('_' + i)\n            if (element) {\n                element.style.backgroundColor = 'black'\n            }\n\n        }\n    }\n\n    const [hashMap, setHashMap] = useState(() => {\n        const hash = {}\n        initHashMap(hash)\n        return hash\n    })\n    const getNextPosition = (snakeHead, delx) => {\n        var newPos = 1;\n        if (delx == 1 && snakeHead % 20 == 0) {\n            newPos = (snakeHead - 19)\n        }\n        else if (delx == -1 && snakeHead % 20 == 1) {\n            newPos = (snakeHead + 19)\n        }\n        else {\n            newPos = (snakeHead + delx) % 200 == 0 ? 200 : (snakeHead + delx + 200) % 200\n        }\n        return newPos\n    }\n    const createSnake = () => {\n        const length = Math.floor(level / 3 + 3)\n        var head = Math.floor(Math.random() * COLS * ROWS)\n        const dirIndex = Math.floor(Math.random() * 4)\n        const direct = dir[dirIndex]\n        const snakeDots = [head]\n        hashMap[head]++\n\n        for (let i = 1; i < length; i++) {\n            const newHead = getNextPosition(head, -direct)\n            snakeDots.unshift(newHead)\n            head = newHead\n            hashMap[newHead]++\n        }\n        return { dots: snakeDots, direction: direct }\n\n    }\n    const [snakes, setSnakes] = useState(() => {\n        const a = createSnake(5)\n        return [a]\n\n    });\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [score, setScore] = useState(0);\n    const [toggleGame, setToggleGame] = useState(1)\n    const updatePosRef = useRef()\n    const updateDirRef = useRef()\n\n\n    useEffect(() => {\n\n        placeSnake();\n        placeDiamond();\n\n\n    }, [diamondPosition, snakes])\n\n\n\n    useEffect(() => {\n\n        updateDirRef.current = updateDirection\n        updatePosRef.current = updatePosition\n\n    })\n\n\n\n    useEffect(() => {\n        const moveInterval = setInterval(() => { updatePosRef.current(); }, 1000)\n        const direction = setInterval(() => { updateDirRef.current(); }, 5000)\n\n        if (toggleGame == 0) {\n            clearInterval(moveInterval)\n            clearInterval(direction)\n        }\n        return () => { clearInterval(moveInterval); clearInterval(direction) }\n    }, [toggleGame]);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n    }\n    const removeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'black'\n\n    }\n    const placeSnake = () => {\n\n        for (let i = 1; i <= ROWS * COLS; i++) {\n            const dot = document.querySelector('.grid #_' + i)\n\n            if (hashMap[i] != 0) {\n                dot.style.backgroundColor = 'red'\n            }\n            else dot.style.backgroundColor = 'black'\n        }\n\n    }\n\n\n    const diamondClick = (e) => {\n        if (!toggleGame) return\n        const clicked = e.target\n        if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n            setScore(score + 10)\n            setLevel(level + 1)\n            removeDiamond()\n            setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n            const temp = [...snakes]\n            const newSnake = createSnake()\n            temp.push(newSnake)\n            setSnakes(temp)\n        }\n\n    }\n\n\n    const updateDirection = () => {\n        for (let i = 0; i < snakes.length; i++) {\n            const dirArr = dir.filter((item) => {\n                if (item != -snakes[i].direction && item != snakes[i].direction) { return true }\n                else return false\n            });\n            const dirIndex = Math.floor(Math.random() * 2)\n            snakes[i].direction = dirArr[dirIndex]\n\n        }\n    }\n    const updatePosition = () => {\n\n        const temp = [...snakes]\n        for (let i = 0; i < temp.length; i++) {\n            const head = temp[i].dots[temp[i].dots.length - 1]\n\n            const direction = temp[i].direction\n            const newHeadPos = getNextPosition(head, direction)\n            hashMap[newHeadPos]++\n            hashMap[temp[i].dots[0]]--\n\n            temp[i].dots.push(newHeadPos)\n            temp[i].dots.shift()\n\n\n        }\n        setSnakes(temp)\n    }\n    const reset = () => {\n        setLevel(1)\n        setScore(0)\n        initHashMap(hashMap)\n        level = 1\n        const a = createSnake()\n        removeDiamond()\n        setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n        setSnakes([a])\n        setToggleGame(0)\n    }\n\n\n    const handleMouseHover = (e) => {\n        const hovered = e.target\n        if (hovered == e.currentTarget) {\n            return\n        }\n        hovered.style.backgroundColor = 'green'\n\n        var id = hovered.getAttribute('id')\n        id = id.slice(1)\n        if (hashMap[id]) {\n            setScore(score - 10)\n        }\n\n\n    }\n    const handleMouseOut = (e) => {\n        const hovered = e.target\n        if (hovered == e.currentTarget) {\n            return\n        }\n\n        var id = hovered.getAttribute('id')\n        id = id.slice(1)\n        if (hashMap[id]) {\n            hovered.style.backgroundColor = 'red'\n\n        }\n        else if (id == diamondPosition) {\n            hovered.style.backgroundColor = 'blue'\n\n\n        }\n        else { hovered.style.backgroundColor = 'black' }\n\n\n\n    }\n\n\n    return (\n        <>\n            <div onClick={diamondClick}\n                onMouseOver={handleMouseHover}\n                onMouseOut={handleMouseOut}\n                className=\"grid\"\n                style={{\n                    gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n                    gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`,\n                }}\n            >\n                {Array.from({ length: ROWS * COLS }, (_, index) => (\n                    < div key={index} id={'_' + (index + 1)} />\n                ))}\n            </div>\n\n            <div>Score: {score}</div>\n            <div>Level: {level}</div>\n            <button onClick={() => { setToggleGame(1 - toggleGame) }}>{toggleGame ? 'Stop' : 'Start'}</button>\n            <button onClick={reset}>Reset Game</button>\n\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}