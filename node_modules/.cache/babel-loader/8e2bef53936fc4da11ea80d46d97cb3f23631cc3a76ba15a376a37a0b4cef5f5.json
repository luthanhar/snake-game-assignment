{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlayArea = () => {\n  const cellHeight = '30px';\n  const cellWidth = '30px';\n  const rows = 10;\n  const columns = 20;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: diamondClick,\n    className: \"grid\",\n    style: {\n      gridTemplateColumns: `repeat(${columns}, ${cellWidth})`,\n      gridTemplateRows: `repeat(${rows}, ${cellHeight})`\n    },\n    children: Array.from({\n      length: rows * columns\n    }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: '_' + (index + 1)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n_c = PlayArea;\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [delx, setDelx] = useState(1);\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [level, setLevel] = useState(1);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    placeSnake();\n    placeDiamond();\n  }, []);\n  const placeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'blue';\n  };\n  const placeSnake = () => {\n    const snake = document.querySelector('.grid #_' + snakePosition);\n    snake.style.backgroundColor = 'red';\n  };\n\n  // const handleKeyDown = (e) => {\n  //     switch (e.keyCode) {\n  //         case 37: // Left arrow\n  //             movePlayer(-CELL_SIZE, 0);\n  //             break;\n  //         case 38: // Up arrow\n  //             movePlayer(0, -CELL_SIZE);\n  //             break;\n  //         case 39: // Right arrow\n  //             movePlayer(CELL_SIZE, 0);\n  //             break;\n  //         case 40: // Down arrow\n  //             movePlayer(0, CELL_SIZE);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // };\n\n  // const movePlayer = (dx, dy) => {\n  //     const newX = playerPosition.x + dx;\n  //     const newY = playerPosition.y + dy;\n  //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n  //         setPlayerPosition({ x: newX, y: newY });\n  //         checkCollision(newX, newY);\n  //     }\n  // };\n\n  // const checkCollision = (x, y) => {\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PlayArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"BpU0s1p0LNl6i45rJhuiUHLVt7U=\");\n_c2 = SnakeGame;\nexport default SnakeGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlayArea\");\n$RefreshReg$(_c2, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","PlayArea","cellHeight","cellWidth","rows","columns","onClick","diamondClick","className","style","gridTemplateColumns","gridTemplateRows","children","Array","from","length","_","index","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","SnakeGame","_s","ROWS","COLS","CELL_SIZE","snakePosition","setSnakePosition","Math","floor","random","delx","setDelx","diamondPosition","setDiamondPosition","level","setLevel","score","setScore","placeSnake","placeDiamond","diamond","document","querySelector","backgroundColor","snake","_c2","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './play-css.css';\n\nconst PlayArea = () => {\n    const cellHeight = '30px';\n    const cellWidth = '30px';\n    const rows = 10;\n    const columns = 20;\n    return (\n        <div onClick={diamondClick}\n            className=\"grid\"\n            style={{\n                gridTemplateColumns: `repeat(${columns}, ${cellWidth})`,\n                gridTemplateRows: `repeat(${rows}, ${cellHeight})`,\n            }}\n        >\n            {Array.from({ length: rows * columns }, (_, index) => (\n                < div key={index} id={'_' + (index + 1)} />\n            ))}\n        </div>\n    );\n}\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [delx, setDelx] = useState(1)\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [level, setLevel] = useState(1)\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        placeSnake();\n        placeDiamond();\n    }, []);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n\n    }\n    const placeSnake = () => {\n        const snake = document.querySelector('.grid #_' + snakePosition)\n        snake.style.backgroundColor = 'red'\n    }\n\n\n\n\n\n    // const handleKeyDown = (e) => {\n    //     switch (e.keyCode) {\n    //         case 37: // Left arrow\n    //             movePlayer(-CELL_SIZE, 0);\n    //             break;\n    //         case 38: // Up arrow\n    //             movePlayer(0, -CELL_SIZE);\n    //             break;\n    //         case 39: // Right arrow\n    //             movePlayer(CELL_SIZE, 0);\n    //             break;\n    //         case 40: // Down arrow\n    //             movePlayer(0, CELL_SIZE);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // };\n\n    // const movePlayer = (dx, dy) => {\n    //     const newX = playerPosition.x + dx;\n    //     const newY = playerPosition.y + dy;\n    //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n    //         setPlayerPosition({ x: newX, y: newY });\n    //         checkCollision(newX, newY);\n    //     }\n    // };\n\n    // const checkCollision = (x, y) => {\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <PlayArea />\n            {/* <div style={{ position: 'absolute', top: playerPosition.y, left: playerPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'green' }}></div>\n            <div style={{ position: 'absolute', top: diamondPosition.y, left: diamondPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'blue' }}></div> */}\n            <div>Score: {score}</div>\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}