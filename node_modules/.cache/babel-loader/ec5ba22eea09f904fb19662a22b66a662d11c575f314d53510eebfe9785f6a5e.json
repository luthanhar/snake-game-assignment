{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Grid } from './grid';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  console.log(\"Snake Game\");\n  const [playerPosition, setPlayerPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [diamondPosition, setDiamondPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    placePlayer();\n    placeDiamond();\n  }, []);\n  const placePlayer = () => {\n    const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n    const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n    setPlayerPosition({\n      x,\n      y\n    });\n  };\n  const placeDiamond = () => {\n    const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n    const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n    setDiamondPosition({\n      x,\n      y\n    });\n  };\n  const handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 37:\n        // Left arrow\n        movePlayer(-CELL_SIZE, 0);\n        break;\n      case 38:\n        // Up arrow\n        movePlayer(0, -CELL_SIZE);\n        break;\n      case 39:\n        // Right arrow\n        movePlayer(CELL_SIZE, 0);\n        break;\n      case 40:\n        // Down arrow\n        movePlayer(0, CELL_SIZE);\n        break;\n      default:\n        break;\n    }\n  };\n  const movePlayer = (dx, dy) => {\n    const newX = playerPosition.x + dx;\n    const newY = playerPosition.y + dy;\n    if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n      setPlayerPosition({\n        x: newX,\n        y: newY\n      });\n      checkCollision(newX, newY);\n    }\n  };\n  const checkCollision = (x, y) => {\n    if (x === diamondPosition.x && y === diamondPosition.y) {\n      setScore(score + 10);\n      placeDiamond();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SnakeGame, \"SgeyfXrwZGhJn1KrRS7Oc6waXy0=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","Grid","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","console","log","playerPosition","setPlayerPosition","x","y","diamondPosition","setDiamondPosition","score","setScore","placePlayer","placeDiamond","Math","floor","random","handleKeyDown","e","keyCode","movePlayer","dx","dy","newX","newY","checkCollision","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Grid } from './grid';\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    console.log(\"Snake Game\")\n    const [playerPosition, setPlayerPosition] = useState({ x: 0, y: 0 });\n    const [diamondPosition, setDiamondPosition] = useState({ x: 0, y: 0 });\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        placePlayer();\n        placeDiamond();\n    }, []);\n\n    const placePlayer = () => {\n        const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n        const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n        setPlayerPosition({ x, y });\n    };\n\n    const placeDiamond = () => {\n        const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n        const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n        setDiamondPosition({ x, y });\n    };\n\n    const handleKeyDown = (e) => {\n        switch (e.keyCode) {\n            case 37: // Left arrow\n                movePlayer(-CELL_SIZE, 0);\n                break;\n            case 38: // Up arrow\n                movePlayer(0, -CELL_SIZE);\n                break;\n            case 39: // Right arrow\n                movePlayer(CELL_SIZE, 0);\n                break;\n            case 40: // Down arrow\n                movePlayer(0, CELL_SIZE);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const movePlayer = (dx, dy) => {\n        const newX = playerPosition.x + dx;\n        const newY = playerPosition.y + dy;\n        if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n            setPlayerPosition({ x: newX, y: newY });\n            checkCollision(newX, newY);\n        }\n    };\n\n    const checkCollision = (x, y) => {\n        if (x === diamondPosition.x && y === diamondPosition.y) {\n            setScore(score + 10);\n            placeDiamond();\n        }\n    };\n\n    return (\n        <>\n            <Grid />\n            {/* <div style={{ position: 'absolute', top: playerPosition.y, left: playerPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'green' }}></div>\n            <div style={{ position: 'absolute', top: diamondPosition.y, left: diamondPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'blue' }}></div>\n            <div>Score: {score}</div> */}\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}