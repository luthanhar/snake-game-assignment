{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const dir = [1, -20, 1, 20];\n  const [level, setLevel] = useState(1);\n  const [hashMap, setHashMap] = useState(() => {\n    const hashMap = {};\n    for (let i = 1; i <= ROWS * COLS; i++) {\n      hashMap[i] = 0;\n    }\n    return hashMap;\n  });\n  const getNextPosition = (snakeHead, delx) => {\n    var newPos = 1;\n    if (delx == 1 && snakeHead % 20 == 0) {\n      newPos = snakeHead - 19;\n    } else if (delx == -1 && snakeHead % 20 == 1) {\n      newPos = snakeHead + 19;\n    } else {\n      newPos = (snakeHead + delx) % 200 == 0 ? 200 : (snakeHead + delx + 200) % 200;\n    }\n    return newPos;\n  };\n  const createSnake = () => {\n    const length = Math.floor(level / 3 + 3);\n    var head = Math.floor(Math.random() * COLS * ROWS);\n    const dirIndex = Math.floor(Math.random() * 4);\n    const direct = dir[dirIndex];\n    const snakeDots = [head];\n    hashMap[head]++;\n    for (let i = 1; i < length; i++) {\n      const newHead = getNextPosition(head, -direct);\n      snakeDots.unshift(newHead);\n      head = newHead;\n      hashMap[newHead]++;\n    }\n    return {\n      dots: snakeDots,\n      direction: direct\n    };\n  };\n  const [snakes, setSnakes] = useState(() => {\n    const a = createSnake(5);\n    return [a];\n  });\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [refresh, setRefresh] = useState(1);\n  const [score, setScore] = useState(0);\n  const [toggleGame, setToggleGame] = useState(1);\n  const updatePosRef = useRef();\n  const updateDirRef = useRef();\n  useEffect(() => {\n    placeSnake();\n    placeDiamond();\n  }, [diamondPosition, snakes]);\n  const refreshButton = () => {\n    setRefresh(refresh + 1);\n  };\n  useEffect(() => {\n    updateDirRef.current = updateDirection;\n    updatePosRef.current = updatePosition;\n  });\n  useEffect(() => {\n    const moveInterval = setInterval(updatePosRef.current, 1000);\n    const direction = setInterval(updateDirRef.current, 3000);\n    if (toggleGame == 0) {\n      clearInterval(moveInterval);\n      clearInterval(direction);\n    }\n    return () => {\n      clearInterval(moveInterval);\n      clearInterval(direction);\n    };\n  }, [toggleGame]);\n  const placeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'blue';\n  };\n  const removeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'black';\n  };\n  const placeSnake = () => {\n    for (let i = 1; i <= ROWS * COLS; i++) {\n      if (hashMap[i] != 0) {\n        const dot = document.querySelector('.grid #_' + i);\n        dot.style.backgroundColor = 'red';\n      }\n    }\n  };\n  const diamondClick = e => {\n    const clicked = e.target;\n    if (clicked.getAttribute('id') == '_' + diamondPosition) {\n      setScore(score + 10);\n      setLevel(level + 1);\n      removeDiamond();\n      const temp = [...snakes];\n      const newSnake = createSnake();\n      temp.push(newSnake);\n      setSnakes(temp);\n      setDiamondPosition(Math.floor(Math.random() * COLS * ROWS));\n    }\n  };\n  const updateDirection = () => {\n    console.log(\"snake length in updateDir\", snakes.length);\n    for (let i = 0; i < snakes.length; i++) {\n      const dirArr = dir.filter(item => item != -snakes[i].direction);\n      const dirIndex = Math.floor(Math.random() * 3);\n      snakes[i].direction = dirArr[dirIndex];\n    }\n  };\n  const updatePosition = () => {\n    const temp = [...snakes];\n    for (let i = 0; i < temp.length; i++) {\n      const head = temp[i].dots[temp[i].dots.length - 1];\n      const direction = temp[i].direction;\n      const newHeadPos = getNextPosition(head, direction);\n      const snakeTailPrev = document.querySelector('.grid #_' + temp[i].dots[0]);\n      hashMap[newHeadPos]++;\n      hashMap[temp[i].dots[0]]--;\n      temp[i].dots.push(newHeadPos);\n      temp[i].dots.shift();\n      snakeTailPrev.style.backgroundColor = 'black';\n    }\n    setSnakes(temp);\n  };\n\n  // const handleHover = (e) => {\n  //     const clicked = e.target\n  //     if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n  //         setScore(score + 10)\n  //         setLevel(level + 1)\n  //         removeDiamond()\n  //         const temp = [...snakes]\n  //         const newSnake = createSnake()\n  //         temp.push(newSnake)\n  //         setSnakes([...temp])\n  //         setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n  //     }\n\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: diamondClick,\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n        gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`\n      },\n      children: Array.from({\n        length: ROWS * COLS\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: '_' + (index + 1)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setToggleGame(1 - toggleGame);\n      },\n      children: toggleGame ? 'Stop' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshButton,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"2xiHLW1PIZphKbELUvDrpgZ/Fd0=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","useRef","clear","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","dir","level","setLevel","hashMap","setHashMap","i","getNextPosition","snakeHead","delx","newPos","createSnake","length","Math","floor","head","random","dirIndex","direct","snakeDots","newHead","unshift","dots","direction","snakes","setSnakes","a","diamondPosition","setDiamondPosition","refresh","setRefresh","score","setScore","toggleGame","setToggleGame","updatePosRef","updateDirRef","placeSnake","placeDiamond","refreshButton","current","updateDirection","updatePosition","moveInterval","setInterval","clearInterval","diamond","document","querySelector","style","backgroundColor","removeDiamond","dot","diamondClick","e","clicked","target","getAttribute","temp","newSnake","push","console","log","dirArr","filter","item","newHeadPos","snakeTailPrev","shift","children","onClick","className","gridTemplateColumns","gridTemplateRows","Array","from","_","index","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const dir = [1, -20, 1, 20]\n    const [level, setLevel] = useState(1)\n    const [hashMap, setHashMap] = useState(() => {\n        const hashMap = {}\n        for (let i = 1; i <= ROWS * COLS; i++) {\n            hashMap[i] = 0\n\n        }\n        return hashMap\n    })\n    const getNextPosition = (snakeHead, delx) => {\n        var newPos = 1;\n        if (delx == 1 && snakeHead % 20 == 0) {\n            newPos = (snakeHead - 19)\n        }\n        else if (delx == -1 && snakeHead % 20 == 1) {\n            newPos = (snakeHead + 19)\n        }\n        else {\n            newPos = (snakeHead + delx) % 200 == 0 ? 200 : (snakeHead + delx + 200) % 200\n        }\n        return newPos\n    }\n    const createSnake = () => {\n        const length = Math.floor(level / 3 + 3)\n        var head = Math.floor(Math.random() * COLS * ROWS)\n        const dirIndex = Math.floor(Math.random() * 4)\n        const direct = dir[dirIndex]\n        const snakeDots = [head]\n        hashMap[head]++\n\n        for (let i = 1; i < length; i++) {\n            const newHead = getNextPosition(head, -direct)\n            snakeDots.unshift(newHead)\n            head = newHead\n            hashMap[newHead]++\n        }\n        return { dots: snakeDots, direction: direct }\n\n    }\n    const [snakes, setSnakes] = useState(() => {\n        const a = createSnake(5)\n        return [a]\n\n    });\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [refresh, setRefresh] = useState(1)\n    const [score, setScore] = useState(0);\n    const [toggleGame, setToggleGame] = useState(1)\n    const updatePosRef = useRef()\n    const updateDirRef = useRef()\n\n\n    useEffect(() => {\n\n        placeSnake();\n        placeDiamond();\n\n\n    }, [diamondPosition, snakes])\n\n\n\n\n\n    const refreshButton = () => {\n        setRefresh(refresh + 1)\n    }\n    useEffect(() => {\n\n        updateDirRef.current = updateDirection\n        updatePosRef.current = updatePosition\n\n    })\n\n\n\n    useEffect(() => {\n        const moveInterval = setInterval(updatePosRef.current, 1000)\n        const direction = setInterval(updateDirRef.current, 3000)\n\n        if (toggleGame == 0) {\n            clearInterval(moveInterval)\n            clearInterval(direction)\n        }\n        return () => { clearInterval(moveInterval); clearInterval(direction) }\n    }, [toggleGame]);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n    }\n    const removeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'black'\n\n    }\n    const placeSnake = () => {\n\n        for (let i = 1; i <= ROWS * COLS; i++) {\n\n            if (hashMap[i] != 0) {\n                const dot = document.querySelector('.grid #_' + i)\n                dot.style.backgroundColor = 'red'\n\n            }\n        }\n\n    }\n\n\n    const diamondClick = (e) => {\n        const clicked = e.target\n        if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n            setScore(score + 10)\n            setLevel(level + 1)\n            removeDiamond()\n            const temp = [...snakes]\n            const newSnake = createSnake()\n            temp.push(newSnake)\n            setSnakes(temp)\n            setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n        }\n\n    }\n\n\n    const updateDirection = () => {\n        console.log(\"snake length in updateDir\", snakes.length)\n        for (let i = 0; i < snakes.length; i++) {\n            const dirArr = dir.filter((item) => item != -snakes[i].direction);\n            const dirIndex = Math.floor(Math.random() * 3)\n            snakes[i].direction = dirArr[dirIndex]\n\n        }\n    }\n    const updatePosition = () => {\n\n        const temp = [...snakes]\n        for (let i = 0; i < temp.length; i++) {\n            const head = temp[i].dots[temp[i].dots.length - 1]\n\n            const direction = temp[i].direction\n            const newHeadPos = getNextPosition(head, direction)\n            const snakeTailPrev = document.querySelector('.grid #_' + temp[i].dots[0])\n            hashMap[newHeadPos]++\n            hashMap[temp[i].dots[0]]--\n\n            temp[i].dots.push(newHeadPos)\n            temp[i].dots.shift()\n            snakeTailPrev.style.backgroundColor = 'black'\n\n\n        }\n        setSnakes(temp)\n    }\n\n\n    // const handleHover = (e) => {\n    //     const clicked = e.target\n    //     if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n    //         setScore(score + 10)\n    //         setLevel(level + 1)\n    //         removeDiamond()\n    //         const temp = [...snakes]\n    //         const newSnake = createSnake()\n    //         temp.push(newSnake)\n    //         setSnakes([...temp])\n    //         setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n    //     }\n\n\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <div onClick={diamondClick}\n                className=\"grid\"\n                style={{\n                    gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n                    gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`,\n                }}\n            >\n                {Array.from({ length: ROWS * COLS }, (_, index) => (\n                    < div key={index} id={'_' + (index + 1)} />\n                ))}\n            </div>\n\n            <div>Score: {score}</div>\n            <div>Level: {level}</div>\n            <button onClick={() => { setToggleGame(1 - toggleGame) }}>{toggleGame ? 'Stop' : 'Start'}</button>\n            <button onClick={refreshButton}>Refresh</button>\n\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}