{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [delx, setDelx] = useState(1);\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [level, setLevel] = useState(1);\n  const [score, setScore] = useState(0);\n  const [toggleGame, setToggleGame] = useState(1);\n  useEffect(() => {\n    placeSnake();\n    placeDiamond();\n  }, [diamondPosition, snakePosition]);\n  useEffect(() => {\n    const moveInterval = setInterval(() => {\n      if (delx == 1 && snakePosition % 20 == 0) {\n        setSnakePosition(snakePosition - 19);\n      } else if (delx == -1 && snakePosition % 20 == 1) {\n        setSnakePosition(snakePosition + 19);\n      } else {\n        setSnakePosition((snakePosition + delx) % 200);\n      }\n      removeSnake();\n    }, 1000);\n    if (toggleGame == 0) {\n      clearInterval(moveInterval);\n    } else if (toggleGame == 1) {\n      setInterval(moveInterval);\n    }\n    return () => {\n      clearInterval(moveInterval);\n    };\n  }, [snakePosition, toggleGame]);\n  const placeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'blue';\n  };\n  const removeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'black';\n  };\n  const placeSnake = () => {\n    const snake = document.querySelector('.grid #_' + snakePosition);\n    snake.style.backgroundColor = 'red';\n  };\n  const removeSnake = () => {\n    const snake = document.querySelector('.grid #_' + snakePosition);\n    snake.style.backgroundColor = 'black';\n  };\n  const diamondClick = e => {\n    const clicked = e.target;\n    if (clicked.getAttribute('id') == '_' + diamondPosition) {\n      setScore(score + 10);\n      setLevel(level + 1);\n      removeDiamond();\n      setDiamondPosition(Math.floor(Math.random() * COLS * ROWS));\n    }\n  };\n\n  // const handleKeyDown = (e) => {\n  //     switch (e.keyCode) {\n  //         case 37: // Left arrow\n  //             movePlayer(-CELL_SIZE, 0);\n  //             break;\n  //         case 38: // Up arrow\n  //             movePlayer(0, -CELL_SIZE);\n  //             break;\n  //         case 39: // Right arrow\n  //             movePlayer(CELL_SIZE, 0);\n  //             break;\n  //         case 40: // Down arrow\n  //             movePlayer(0, CELL_SIZE);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // };\n\n  // const movePlayer = (dx, dy) => {\n  //     const newX = playerPosition.x + dx;\n  //     const newY = playerPosition.y + dy;\n  //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n  //         setPlayerPosition({ x: newX, y: newY });\n  //         checkCollision(newX, newY);\n  //     }\n  // };\n\n  // const checkCollision = (x, y) => {\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: diamondClick,\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n        gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`\n      },\n      children: Array.from({\n        length: ROWS * COLS\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: '_' + (index + 1)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setToggleGame(1 - toggleGame);\n      },\n      children: toggleGame ? 'Stop' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"VGfgcd6CxmLu7hmX+jM3CvfIUaE=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","clear","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","snakePosition","setSnakePosition","Math","floor","random","delx","setDelx","diamondPosition","setDiamondPosition","level","setLevel","score","setScore","toggleGame","setToggleGame","placeSnake","placeDiamond","moveInterval","setInterval","removeSnake","clearInterval","diamond","document","querySelector","style","backgroundColor","removeDiamond","snake","diamondClick","e","clicked","target","getAttribute","children","onClick","className","gridTemplateColumns","gridTemplateRows","Array","from","length","_","index","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [delx, setDelx] = useState(1)\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [level, setLevel] = useState(1)\n    const [score, setScore] = useState(0);\n    const [toggleGame, setToggleGame] = useState(1)\n\n    useEffect(() => {\n        placeSnake();\n        placeDiamond();\n\n    }, [diamondPosition, snakePosition])\n\n\n    useEffect(() => {\n\n\n        const moveInterval = setInterval(() => {\n            if (delx == 1 && snakePosition % 20 == 0) {\n                setSnakePosition(snakePosition - 19)\n            }\n            else if (delx == -1 && snakePosition % 20 == 1) {\n                setSnakePosition(snakePosition + 19)\n            }\n            else {\n                setSnakePosition((snakePosition + delx) % 200)\n            }\n            removeSnake()\n\n\n        }, 1000)\n        if (toggleGame == 0) {\n            clearInterval(moveInterval)\n        }\n        else if (toggleGame == 1) {\n            setInterval(moveInterval)\n        }\n        return () => { clearInterval(moveInterval) }\n    }, [snakePosition, toggleGame]);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n    }\n    const removeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'black'\n\n    }\n    const placeSnake = () => {\n        const snake = document.querySelector('.grid #_' + snakePosition)\n        snake.style.backgroundColor = 'red'\n    }\n    const removeSnake = () => {\n        const snake = document.querySelector('.grid #_' + snakePosition)\n        snake.style.backgroundColor = 'black'\n    }\n\n    const diamondClick = (e) => {\n        const clicked = e.target\n        if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n            setScore(score + 10)\n            setLevel(level + 1)\n            removeDiamond()\n            setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n        }\n\n    }\n\n\n\n\n\n    // const handleKeyDown = (e) => {\n    //     switch (e.keyCode) {\n    //         case 37: // Left arrow\n    //             movePlayer(-CELL_SIZE, 0);\n    //             break;\n    //         case 38: // Up arrow\n    //             movePlayer(0, -CELL_SIZE);\n    //             break;\n    //         case 39: // Right arrow\n    //             movePlayer(CELL_SIZE, 0);\n    //             break;\n    //         case 40: // Down arrow\n    //             movePlayer(0, CELL_SIZE);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // };\n\n    // const movePlayer = (dx, dy) => {\n    //     const newX = playerPosition.x + dx;\n    //     const newY = playerPosition.y + dy;\n    //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n    //         setPlayerPosition({ x: newX, y: newY });\n    //         checkCollision(newX, newY);\n    //     }\n    // };\n\n    // const checkCollision = (x, y) => {\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <div onClick={diamondClick}\n                className=\"grid\"\n                style={{\n                    gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n                    gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`,\n                }}\n            >\n                {Array.from({ length: ROWS * COLS }, (_, index) => (\n                    < div key={index} id={'_' + (index + 1)} />\n                ))}\n            </div>\n\n            <div>Score: {score}</div>\n            <div>Level: {level}</div>\n            <button onClick={() => { setToggleGame(1 - toggleGame) }}>{toggleGame ? 'Stop' : 'Start'}</button>\n\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}