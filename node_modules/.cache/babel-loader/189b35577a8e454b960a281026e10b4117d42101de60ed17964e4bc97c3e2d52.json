{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [delx, setDelx] = useState(1);\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [level, setLevel] = useState(1);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    placeSnake();\n    placeDiamond();\n  }, []);\n  const placeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'blue';\n  };\n  const placeSnake = () => {\n    const snake = document.querySelector('.grid #_' + snakePosition);\n    snake.style.backgroundColor = 'red';\n  };\n  const diamondClick = e => {\n    const clicked = e.target;\n    if (clicked.getAttribute('id') == '_' + diamondPosition) {}\n  };\n\n  // const handleKeyDown = (e) => {\n  //     switch (e.keyCode) {\n  //         case 37: // Left arrow\n  //             movePlayer(-CELL_SIZE, 0);\n  //             break;\n  //         case 38: // Up arrow\n  //             movePlayer(0, -CELL_SIZE);\n  //             break;\n  //         case 39: // Right arrow\n  //             movePlayer(CELL_SIZE, 0);\n  //             break;\n  //         case 40: // Down arrow\n  //             movePlayer(0, CELL_SIZE);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // };\n\n  // const movePlayer = (dx, dy) => {\n  //     const newX = playerPosition.x + dx;\n  //     const newY = playerPosition.y + dy;\n  //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n  //         setPlayerPosition({ x: newX, y: newY });\n  //         checkCollision(newX, newY);\n  //     }\n  // };\n\n  // const checkCollision = (x, y) => {\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: diamondClick,\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n        gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`\n      },\n      children: Array.from({\n        length: ROWS * COLS\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: '_' + (index + 1)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"BpU0s1p0LNl6i45rJhuiUHLVt7U=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","snakePosition","setSnakePosition","Math","floor","random","delx","setDelx","diamondPosition","setDiamondPosition","level","setLevel","score","setScore","placeSnake","placeDiamond","diamond","document","querySelector","style","backgroundColor","snake","diamondClick","e","clicked","target","getAttribute","children","onClick","className","gridTemplateColumns","gridTemplateRows","Array","from","length","_","index","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './play-css.css';\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [delx, setDelx] = useState(1)\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [level, setLevel] = useState(1)\n    const [score, setScore] = useState(0);\n\n\n\n    useEffect(() => {\n        placeSnake();\n        placeDiamond();\n    }, []);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n\n    }\n    const placeSnake = () => {\n        const snake = document.querySelector('.grid #_' + snakePosition)\n        snake.style.backgroundColor = 'red'\n    }\n\n    const diamondClick = (e) => {\n        const clicked = e.target\n        if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n\n        }\n\n    }\n\n\n\n\n\n    // const handleKeyDown = (e) => {\n    //     switch (e.keyCode) {\n    //         case 37: // Left arrow\n    //             movePlayer(-CELL_SIZE, 0);\n    //             break;\n    //         case 38: // Up arrow\n    //             movePlayer(0, -CELL_SIZE);\n    //             break;\n    //         case 39: // Right arrow\n    //             movePlayer(CELL_SIZE, 0);\n    //             break;\n    //         case 40: // Down arrow\n    //             movePlayer(0, CELL_SIZE);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // };\n\n    // const movePlayer = (dx, dy) => {\n    //     const newX = playerPosition.x + dx;\n    //     const newY = playerPosition.y + dy;\n    //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n    //         setPlayerPosition({ x: newX, y: newY });\n    //         checkCollision(newX, newY);\n    //     }\n    // };\n\n    // const checkCollision = (x, y) => {\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <div onClick={diamondClick}\n                className=\"grid\"\n                style={{\n                    gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n                    gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`,\n                }}\n            >\n                {Array.from({ length: ROWS * COLS }, (_, index) => (\n                    < div key={index} id={'_' + (index + 1)} />\n                ))}\n            </div>\n\n            <div>Score: {score}</div>\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}