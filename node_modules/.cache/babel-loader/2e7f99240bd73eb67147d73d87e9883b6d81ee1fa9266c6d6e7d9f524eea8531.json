{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport PlayArea from \"./playArea\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    // placeSnake();\n    // placeDiamond();\n  }, []);\n  const handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 37:\n        // Left arrow\n        movePlayer(-CELL_SIZE, 0);\n        break;\n      case 38:\n        // Up arrow\n        movePlayer(0, -CELL_SIZE);\n        break;\n      case 39:\n        // Right arrow\n        movePlayer(CELL_SIZE, 0);\n        break;\n      case 40:\n        // Down arrow\n        movePlayer(0, CELL_SIZE);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // const movePlayer = (dx, dy) => {\n  //     const newX = playerPosition.x + dx;\n  //     const newY = playerPosition.y + dy;\n  //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n  //         setPlayerPosition({ x: newX, y: newY });\n  //         checkCollision(newX, newY);\n  //     }\n  // };\n\n  const checkCollision = (x, y) => {\n    if (x === diamondPosition.x && y === diamondPosition.y) {\n      setScore(score + 10);\n      placeDiamond();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PlayArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"UULKpXwmn6yp3TI9hwsyCRKyO04=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","PlayArea","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","snakePosition","setSnakePosition","Math","floor","random","diamondPosition","setDiamondPosition","score","setScore","handleKeyDown","e","keyCode","movePlayer","checkCollision","x","y","placeDiamond","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport PlayArea from \"./playArea\";\n\n\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const [snakePosition, setSnakePosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        // placeSnake();\n        // placeDiamond();\n    }, []);\n\n\n\n    const handleKeyDown = (e) => {\n        switch (e.keyCode) {\n            case 37: // Left arrow\n                movePlayer(-CELL_SIZE, 0);\n                break;\n            case 38: // Up arrow\n                movePlayer(0, -CELL_SIZE);\n                break;\n            case 39: // Right arrow\n                movePlayer(CELL_SIZE, 0);\n                break;\n            case 40: // Down arrow\n                movePlayer(0, CELL_SIZE);\n                break;\n            default:\n                break;\n        }\n    };\n\n    // const movePlayer = (dx, dy) => {\n    //     const newX = playerPosition.x + dx;\n    //     const newY = playerPosition.y + dy;\n    //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n    //         setPlayerPosition({ x: newX, y: newY });\n    //         checkCollision(newX, newY);\n    //     }\n    // };\n\n    const checkCollision = (x, y) => {\n        if (x === diamondPosition.x && y === diamondPosition.y) {\n            setScore(score + 10);\n            placeDiamond();\n        }\n    };\n\n    return (\n        <>\n            <PlayArea />\n            {/* <div style={{ position: 'absolute', top: playerPosition.y, left: playerPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'green' }}></div>\n            <div style={{ position: 'absolute', top: diamondPosition.y, left: diamondPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'blue' }}></div> */}\n            <div>Score: {score}</div>\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAKlC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAACc,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,IAAI,GAAGD,IAAI,CAAC,CAAC;EAC3F,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAACc,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,IAAI,GAAGD,IAAI,CAAC,CAAC;EAC/F,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACZ;IACA;EAAA,CACH,EAAE,EAAE,CAAC;EAIN,MAAMoB,aAAa,GAAIC,CAAC,IAAK;IACzB,QAAQA,CAAC,CAACC,OAAO;MACb,KAAK,EAAE;QAAE;QACLC,UAAU,CAAC,CAACb,SAAS,EAAE,CAAC,CAAC;QACzB;MACJ,KAAK,EAAE;QAAE;QACLa,UAAU,CAAC,CAAC,EAAE,CAACb,SAAS,CAAC;QACzB;MACJ,KAAK,EAAE;QAAE;QACLa,UAAU,CAACb,SAAS,EAAE,CAAC,CAAC;QACxB;MACJ,KAAK,EAAE;QAAE;QACLa,UAAU,CAAC,CAAC,EAAEb,SAAS,CAAC;QACxB;MACJ;QACI;IACR;EACJ,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMc,cAAc,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC7B,IAAID,CAAC,KAAKT,eAAe,CAACS,CAAC,IAAIC,CAAC,KAAKV,eAAe,CAACU,CAAC,EAAE;MACpDP,QAAQ,CAACD,KAAK,GAAG,EAAE,CAAC;MACpBS,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC;EAED,oBACIxB,OAAA,CAAAE,SAAA;IAAAuB,QAAA,gBACIzB,OAAA,CAACF,QAAQ;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGZ7B,OAAA;MAAAyB,QAAA,GAAK,SAAO,EAACV,KAAK;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eAC3B,CAAC;AAEX,CAAC;AAACzB,EAAA,CA1DID,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA4Df,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}