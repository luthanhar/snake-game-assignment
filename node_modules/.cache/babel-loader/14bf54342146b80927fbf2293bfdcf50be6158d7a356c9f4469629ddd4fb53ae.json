{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const ROWS = 10;\n  const COLS = 20;\n  const CELL_SIZE = 30;\n  const dir = [1, -20, 1, 20];\n  const [level, setLevel] = useState(1);\n  const getNextPosition = (snakeHead, delx) => {\n    var newPos = 1;\n    if (delx == 1 && snakeHead % 20 == 0) {\n      newPos = snakeHead - 19;\n    } else if (delx == -1 && snakeHead % 20 == 1) {\n      newPos = snakeHead + 19;\n    } else {\n      newPos = snakeHead + delx == 200 ? 200 : (snakeHead + delx + 200) % 200;\n    }\n    return newPos;\n  };\n  const createSnake = length => {\n    console.log(\"Create Snakes\");\n    var head = Math.floor(Math.random() * COLS * ROWS);\n    const dirIndex = Math.floor(Math.random() * 4);\n    const direct = dir[dirIndex];\n    const snakeDots = [head];\n    for (let i = 1; i < length; i++) {\n      const newHead = getNextPosition(head, -direct);\n      snakeDots.unshift(newHead);\n      head = newHead;\n    }\n    return {\n      dots: snakeDots,\n      direction: direct\n    };\n  };\n  const [snakes, setSnakes] = useState(() => {\n    const a = createSnake(level + 1);\n    console.log(\"snake initially\", a.dots, a.dots[0], a.dots[1]);\n    return [a];\n  });\n  // const [snakes, setSnakes] = useState([{ dots: [1, 2], direction: 1 }]\n\n  // );\n  console.log(\"Hi\", snakes[0].dots);\n  const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n  const [refresh, setRefresh] = useState(1);\n  const [score, setScore] = useState(0);\n  const [toggleGame, setToggleGame] = useState(1);\n  useEffect(() => {\n    placeDiamond();\n    placeSnake();\n  }, [diamondPosition, snakes]);\n\n  // useEffect(() => {\n  //     const direction = setInterval(\n  //         updateDirection\n  //         , 4000)\n  //     if (toggleGame == 0) clearInterval(direction)\n  //     return () => { clearInterval(direction) }\n  // }, [toggleGame])\n\n  const refreshButton = () => {\n    setRefresh(refresh + 1);\n  };\n  useEffect(() => {\n    const moveInterval = setInterval(() => {\n      updatePosition();\n    }, 3000);\n    if (toggleGame == 0) {\n      clearInterval(moveInterval);\n    }\n    return () => {\n      clearInterval(moveInterval);\n    };\n  }, [toggleGame, snakes]);\n  const placeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'blue';\n  };\n  const removeDiamond = () => {\n    const diamond = document.querySelector('.grid #_' + diamondPosition);\n    diamond.style.backgroundColor = 'black';\n  };\n  const placeSnake = () => {\n    for (let i = 0; i < snakes.length; i++) {\n      const dots = snakes[i].dots;\n      console.log(\"Placing snakes\");\n      for (let j = 0; j < dots.length; j++) {\n        console.log(dots.length);\n        const dot = document.querySelector('.grid #_' + dots[j]);\n        dot.style.backgroundColor = 'red';\n      }\n    }\n  };\n  const diamondClick = e => {\n    const clicked = e.target;\n    if (clicked.getAttribute('id') == '_' + diamondPosition) {\n      setScore(score + 10);\n      setLevel(level + 1);\n      removeDiamond();\n      setDiamondPosition(Math.floor(Math.random() * COLS * ROWS));\n    }\n  };\n  const updateDirection = () => {\n    for (let i = 0; i < snakes.length; i++) {\n      const dirArr = dir.filter(item => item != -snakes[i].direction);\n      const dirIndex = Math.floor(Math.random() * 3);\n      snakes[i].direction = dirArr[dirIndex];\n    }\n  };\n  const updatePosition = () => {\n    console.log(\"Updating position\");\n    const temp = [...snakes];\n    for (let i = 0; i < temp.length; i++) {\n      const head = temp[i].dots[temp[i].dots.length - 1];\n      // console.log(\"Tail Initially\", temp[i].dots[0], snakes[i].dots[0])\n      const direction = temp[i].direction;\n      const newHeadPos = getNextPosition(head, direction);\n      temp[i].dots.push(newHeadPos);\n      temp[i].dots.shift();\n      console.log(temp[i].dots);\n      const snakeTailPrev = document.querySelector('.grid #_' + snakes[i].dots[0]);\n      // console.log(\"Updating position\", \"New head\", newHeadPos, temp[i].dots.length, snakes[i].dots.length, temp[i].dots[0], snakes[i].dots[1])\n      snakeTailPrev.style.backgroundColor = 'black';\n    }\n    setSnakes(temp);\n  };\n\n  // const checkCollision = (x, y) => {\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: diamondClick,\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n        gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`\n      },\n      children: Array.from({\n        length: ROWS * COLS\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: '_' + (index + 1)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Level: \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setToggleGame(1 - toggleGame);\n      },\n      children: toggleGame ? 'Stop' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshButton,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SnakeGame, \"UUqUuMZ0bPVn4yBrVYi6qcHkmFc=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","clear","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","ROWS","COLS","CELL_SIZE","dir","level","setLevel","getNextPosition","snakeHead","delx","newPos","createSnake","length","console","log","head","Math","floor","random","dirIndex","direct","snakeDots","i","newHead","unshift","dots","direction","snakes","setSnakes","a","diamondPosition","setDiamondPosition","refresh","setRefresh","score","setScore","toggleGame","setToggleGame","placeDiamond","placeSnake","refreshButton","moveInterval","setInterval","updatePosition","clearInterval","diamond","document","querySelector","style","backgroundColor","removeDiamond","j","dot","diamondClick","e","clicked","target","getAttribute","updateDirection","dirArr","filter","item","temp","newHeadPos","push","shift","snakeTailPrev","children","onClick","className","gridTemplateColumns","gridTemplateRows","Array","from","_","index","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './play-css.css';\nimport { clear } from '@testing-library/user-event/dist/clear';\n\n\nconst SnakeGame = () => {\n    const ROWS = 10;\n    const COLS = 20;\n    const CELL_SIZE = 30;\n    const dir = [1, -20, 1, 20]\n    const [level, setLevel] = useState(1)\n    const getNextPosition = (snakeHead, delx) => {\n        var newPos = 1;\n        if (delx == 1 && snakeHead % 20 == 0) {\n            newPos = (snakeHead - 19)\n        }\n        else if (delx == -1 && snakeHead % 20 == 1) {\n            newPos = (snakeHead + 19)\n        }\n        else {\n            newPos = snakeHead + delx == 200 ? 200 : (snakeHead + delx + 200) % 200\n        }\n        return newPos\n    }\n    const createSnake = (length) => {\n        console.log(\"Create Snakes\")\n        var head = Math.floor(Math.random() * COLS * ROWS)\n        const dirIndex = Math.floor(Math.random() * 4)\n        const direct = dir[dirIndex]\n        const snakeDots = [head]\n\n        for (let i = 1; i < length; i++) {\n            const newHead = getNextPosition(head, -direct)\n            snakeDots.unshift(newHead)\n            head = newHead\n        }\n        return { dots: snakeDots, direction: direct }\n\n    }\n    const [snakes, setSnakes] = useState(() => {\n        const a = createSnake(level + 1)\n        console.log(\"snake initially\", a.dots, a.dots[0], a.dots[1])\n        return [a]\n\n    });\n    // const [snakes, setSnakes] = useState([{ dots: [1, 2], direction: 1 }]\n\n\n    // );\n    console.log(\"Hi\", snakes[0].dots)\n    const [diamondPosition, setDiamondPosition] = useState(Math.floor(Math.random() * COLS * ROWS));\n    const [refresh, setRefresh] = useState(1)\n    const [score, setScore] = useState(0);\n    const [toggleGame, setToggleGame] = useState(1)\n\n    useEffect(() => {\n        placeDiamond();\n\n        placeSnake();\n\n    }, [diamondPosition, snakes])\n\n    // useEffect(() => {\n    //     const direction = setInterval(\n    //         updateDirection\n    //         , 4000)\n    //     if (toggleGame == 0) clearInterval(direction)\n    //     return () => { clearInterval(direction) }\n    // }, [toggleGame])\n\n    const refreshButton = () => {\n        setRefresh(refresh + 1)\n    }\n\n\n\n\n    useEffect(() => {\n        const moveInterval = setInterval(() => {\n            updatePosition()\n\n        }, 3000)\n\n        if (toggleGame == 0) {\n            clearInterval(moveInterval)\n        }\n        return () => { clearInterval(moveInterval); }\n    }, [toggleGame, snakes]);\n\n\n\n    const placeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'blue'\n    }\n    const removeDiamond = () => {\n        const diamond = document.querySelector('.grid #_' + diamondPosition)\n        diamond.style.backgroundColor = 'black'\n\n    }\n    const placeSnake = () => {\n\n        for (let i = 0; i < snakes.length; i++) {\n            const dots = snakes[i].dots\n            console.log(\"Placing snakes\")\n            for (let j = 0; j < dots.length; j++) {\n                console.log(dots.length)\n                const dot = document.querySelector('.grid #_' + dots[j])\n                dot.style.backgroundColor = 'red'\n\n            }\n\n        }\n\n    }\n\n\n    const diamondClick = (e) => {\n        const clicked = e.target\n        if ((clicked.getAttribute('id')) == '_' + diamondPosition) {\n            setScore(score + 10)\n            setLevel(level + 1)\n            removeDiamond()\n            setDiamondPosition(Math.floor(Math.random() * COLS * ROWS))\n        }\n\n    }\n\n\n    const updateDirection = () => {\n        for (let i = 0; i < snakes.length; i++) {\n            const dirArr = dir.filter((item) => item != -snakes[i].direction);\n            const dirIndex = Math.floor(Math.random() * 3)\n            snakes[i].direction = dirArr[dirIndex]\n        }\n    }\n    const updatePosition = () => {\n        console.log(\"Updating position\")\n        const temp = [...snakes]\n        for (let i = 0; i < temp.length; i++) {\n            const head = temp[i].dots[temp[i].dots.length - 1]\n            // console.log(\"Tail Initially\", temp[i].dots[0], snakes[i].dots[0])\n            const direction = temp[i].direction\n            const newHeadPos = getNextPosition(head, direction)\n            temp[i].dots.push(newHeadPos)\n            temp[i].dots.shift()\n            console.log(temp[i].dots)\n            const snakeTailPrev = document.querySelector('.grid #_' + snakes[i].dots[0])\n            // console.log(\"Updating position\", \"New head\", newHeadPos, temp[i].dots.length, snakes[i].dots.length, temp[i].dots[0], snakes[i].dots[1])\n            snakeTailPrev.style.backgroundColor = 'black'\n\n\n        }\n        setSnakes(temp)\n    }\n\n\n    // const checkCollision = (x, y) => {\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <div onClick={diamondClick}\n                className=\"grid\"\n                style={{\n                    gridTemplateColumns: `repeat(${COLS}, ${CELL_SIZE}px)`,\n                    gridTemplateRows: `repeat(${ROWS}, ${CELL_SIZE}px)`,\n                }}\n            >\n                {Array.from({ length: ROWS * COLS }, (_, index) => (\n                    < div key={index} id={'_' + (index + 1)} />\n                ))}\n            </div>\n\n            <div>Score: {score}</div>\n            <div>Level: {level}</div>\n            <button onClick={() => { setToggleGame(1 - toggleGame) }}>{toggleGame ? 'Stop' : 'Start'}</button>\n            <button onClick={refreshButton}>Refresh</button>\n\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}