{"ast":null,"code":"var _jsxFileName = \"/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx\";\n// import { useState, useEffect } from 'react';\nimport PlayArea from \"./playArea\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  // const ROWS = 10;\n  // const COLS = 20;\n  // const CELL_SIZE = 30;\n  console.log(\"Snake Game\");\n  // const [playerPosition, setPlayerPosition] = useState({ x: 0, y: 0 });\n  // const [diamondPosition, setDiamondPosition] = useState({ x: 0, y: 0 });\n  // const [score, setScore] = useState(0);\n\n  // useEffect(() => {\n  //     placePlayer();\n  //     placeDiamond();\n  // }, []);\n\n  // const placePlayer = () => {\n  //     const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n  //     const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n  //     setPlayerPosition({ x, y });\n  // };\n\n  // const placeDiamond = () => {\n  //     const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n  //     const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n  //     setDiamondPosition({ x, y });\n  // };\n\n  // const handleKeyDown = (e) => {\n  //     switch (e.keyCode) {\n  //         case 37: // Left arrow\n  //             movePlayer(-CELL_SIZE, 0);\n  //             break;\n  //         case 38: // Up arrow\n  //             movePlayer(0, -CELL_SIZE);\n  //             break;\n  //         case 39: // Right arrow\n  //             movePlayer(CELL_SIZE, 0);\n  //             break;\n  //         case 40: // Down arrow\n  //             movePlayer(0, CELL_SIZE);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // };\n\n  // const movePlayer = (dx, dy) => {\n  //     const newX = playerPosition.x + dx;\n  //     const newY = playerPosition.y + dy;\n  //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n  //         setPlayerPosition({ x: newX, y: newY });\n  //         checkCollision(newX, newY);\n  //     }\n  // };\n\n  // const checkCollision = (x, y) => {\n  //     if (x === diamondPosition.x && y === diamondPosition.y) {\n  //         setScore(score + 10);\n  //         placeDiamond();\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PlayArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["PlayArea","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luthanhar/Documents/PP practice/MERN/Intern Assignment/snake-game/src/components/snakeGame/snakeGame.jsx"],"sourcesContent":["// import { useState, useEffect } from 'react';\nimport PlayArea from \"./playArea\";\n\n\n\n\nconst SnakeGame = () => {\n    // const ROWS = 10;\n    // const COLS = 20;\n    // const CELL_SIZE = 30;\n    console.log(\"Snake Game\")\n    // const [playerPosition, setPlayerPosition] = useState({ x: 0, y: 0 });\n    // const [diamondPosition, setDiamondPosition] = useState({ x: 0, y: 0 });\n    // const [score, setScore] = useState(0);\n\n    // useEffect(() => {\n    //     placePlayer();\n    //     placeDiamond();\n    // }, []);\n\n    // const placePlayer = () => {\n    //     const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n    //     const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n    //     setPlayerPosition({ x, y });\n    // };\n\n    // const placeDiamond = () => {\n    //     const x = Math.floor(Math.random() * COLS) * CELL_SIZE;\n    //     const y = Math.floor(Math.random() * ROWS) * CELL_SIZE;\n    //     setDiamondPosition({ x, y });\n    // };\n\n    // const handleKeyDown = (e) => {\n    //     switch (e.keyCode) {\n    //         case 37: // Left arrow\n    //             movePlayer(-CELL_SIZE, 0);\n    //             break;\n    //         case 38: // Up arrow\n    //             movePlayer(0, -CELL_SIZE);\n    //             break;\n    //         case 39: // Right arrow\n    //             movePlayer(CELL_SIZE, 0);\n    //             break;\n    //         case 40: // Down arrow\n    //             movePlayer(0, CELL_SIZE);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // };\n\n    // const movePlayer = (dx, dy) => {\n    //     const newX = playerPosition.x + dx;\n    //     const newY = playerPosition.y + dy;\n    //     if (newX >= 0 && newX < COLS * CELL_SIZE && newY >= 0 && newY < ROWS * CELL_SIZE) {\n    //         setPlayerPosition({ x: newX, y: newY });\n    //         checkCollision(newX, newY);\n    //     }\n    // };\n\n    // const checkCollision = (x, y) => {\n    //     if (x === diamondPosition.x && y === diamondPosition.y) {\n    //         setScore(score + 10);\n    //         placeDiamond();\n    //     }\n    // };\n\n    return (\n        <>\n            <PlayArea></PlayArea>\n            {/* <div style={{ position: 'absolute', top: playerPosition.y, left: playerPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'green' }}></div>\n            <div style={{ position: 'absolute', top: diamondPosition.y, left: diamondPosition.x, width: CELL_SIZE, height: CELL_SIZE, backgroundColor: 'blue' }}></div>\n            <div>Score: {score}</div> */}\n        </>\n    );\n};\n\nexport default SnakeGame;\n"],"mappings":";AAAA;AACA,OAAOA,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAKlC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB;EACA;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EACzB;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIL,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACIN,OAAA,CAACF,QAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW;EAAC,gBAIvB,CAAC;AAEX,CAAC;AAACC,EAAA,GArEIR,SAAS;AAuEf,eAAeA,SAAS;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}